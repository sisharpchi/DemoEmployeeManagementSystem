@page "/identity/account/login"
@layout AuthenticationLayout

<div class="container">
	<div class="row justify-content-center align-items-center" style="min-height: 100vh;">
		<div class="col-md-6 col-lg-4">
			<EditForm Model="User" OnValidSubmit="HandleLogin">
				<DataAnnotationsValidator />

				<div class="card shadow-lg bg-dark text-white" style="border-radius: 15px; opacity: 0.9;">
					<div class="card-header text-center fs-4 fw-bold">
						Login
					</div>

					<div class="card-body">

						<div class="form-group mb-3">
							<label>Email</label>
							<InputText @bind-Value="User.Email" class="form-control" placeholder="Enter your email" />
						</div>
						
						<div class="form-group mb-4">
							<label>Password</label>
							<InputText @bind-Value="User.Password" type="password" class="form-control" placeholder="Enter your password" />
						</div>

						<div class="d-grid">
							@if (ShowLoadingButton)
							{
								<ButtonLoadingSpinner></ButtonLoadingSpinner>
							}
							else
							{
								<button type="submit" class="btn btn-primary">Login</button>
							}
						</div>
					</div>

					<div class="card-footer">
						<div class="text-center">
							Don't have an account? <br> 
							<a href="identity/account/register" class="btn-link">Sign Up</a>
						</div>
						<ValidationSummary />
					</div>
				</div>
			</EditForm>
		</div>
	</div>
</div>

@code {
	public bool ShowLoadingButton { get; set; } = false;
	Login User = new();

	[CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }
	protected async override Task OnInitializedAsync()
	{
		await CheckUserAuthentication();
	}
	async Task HandleLogin()
	{
		ShowLoadingButton = true;
		var result = await accountService.SignInAsync(User);
		if (result.Flag)
		{
			await DisplayDialog(result.Message, "Login Success");
			var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
			await customAuthStateProvider.UpdateAuthenticationState(new UserSession(){ Token = result.Token, RefreshToken = result.RefreshToken });
			NavManager.NavigateTo("/", forceLoad: true);
		}
		else
		{
			await DisplayDialog(result.Message, "Alter");
		}
		ShowLoadingButton = false;
	}

	private async Task DisplayDialog(string content, string title)
	{
		await dialogService.AlertAsync(content, title);
	}
	
	// private async Task CheckUserAuthentication()
	// {
	// 	var user = (await AuthenticationState).User;
	// 	bool isAuthenticated = user.Identity!.IsAuthenticated;
	// 	if (isAuthenticated)
	// 	{
	// 		NavManager.NavigateTo("/home/dashboard");
	// 	}
	// }
	
	private async Task CheckUserAuthentication()
	{
		var user = (await AuthenticationState).User;

		if (user?.Identity?.IsAuthenticated == true)
		{
			NavManager.NavigateTo("/home/dashboard");
		}
	}
}

